/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IZDAORegistry {
  export type ZDAORecordStruct = {
    platformType: BigNumberish;
    id: BigNumberish;
    zDAOOwnedBy: string;
    gnosisSafe: string;
    name: string;
    destroyed: boolean;
    associatedzNAs: BigNumberish[];
  };

  export type ZDAORecordStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string,
    boolean,
    BigNumber[]
  ] & {
    platformType: BigNumber;
    id: BigNumber;
    zDAOOwnedBy: string;
    gnosisSafe: string;
    name: string;
    destroyed: boolean;
    associatedzNAs: BigNumber[];
  };
}

export interface ZDAORegistryInterface extends utils.Interface {
  contractName: "ZDAORegistry";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "__ZDAORegistry_init(address)": FunctionFragment;
    "addNewZDAO(uint256,uint256,address,string,bytes)": FunctionFragment;
    "addZDAOFactory(uint8,address)": FunctionFragment;
    "addZNAAssociation(uint256,uint256)": FunctionFragment;
    "adminAssociateZNA(uint256,uint256)": FunctionFragment;
    "adminDisassociateZNA(uint256,uint256)": FunctionFragment;
    "adminModifyZDAO(uint256,address,bytes)": FunctionFragment;
    "adminRemoveZDAO(uint256)": FunctionFragment;
    "doesZDAOExistForZNA(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getZDAOById(uint256)": FunctionFragment;
    "getZDAOByZNA(uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lastZDAOId()": FunctionFragment;
    "listZDAOs(uint256,uint256)": FunctionFragment;
    "numberOfzDAOs()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "removeZNAAssociation(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setZNSHub(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
    "zDAOFactories(uint256)": FunctionFragment;
    "zDAONames(uint256)": FunctionFragment;
    "zDAORecords(uint256)": FunctionFragment;
    "zNATozDAOId(uint256)": FunctionFragment;
    "znsHub()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ZDAORegistry_init",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewZDAO",
    values: [BigNumberish, BigNumberish, string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addZDAOFactory",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addZNAAssociation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminAssociateZNA",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminDisassociateZNA",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminModifyZDAO",
    values: [BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminRemoveZDAO",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "doesZDAOExistForZNA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getZDAOById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getZDAOByZNA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastZDAOId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "listZDAOs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfzDAOs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeZNAAssociation",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setZNSHub", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "zDAOFactories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zDAONames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zDAORecords",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "zNATozDAOId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "znsHub", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ZDAORegistry_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addNewZDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addZDAOFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addZNAAssociation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAssociateZNA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminDisassociateZNA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminModifyZDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminRemoveZDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doesZDAOExistForZNA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZDAOById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getZDAOByZNA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastZDAOId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "listZDAOs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfzDAOs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeZNAAssociation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setZNSHub", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zDAOFactories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zDAONames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "zDAORecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "zNATozDAOId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "znsHub", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DAOCreated(uint256,uint256,address,address,address)": EventFragment;
    "DAODestroyed(uint256)": EventFragment;
    "DAOModified(uint256,address)": EventFragment;
    "LinkAdded(uint256,uint256)": EventFragment;
    "LinkRemoved(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DAOCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DAODestroyed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DAOModified"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type DAOCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string],
  {
    _platformType: BigNumber;
    _zDAOId: BigNumber;
    _gnosisSafe: string;
    _creator: string;
    _zDAO: string;
  }
>;

export type DAOCreatedEventFilter = TypedEventFilter<DAOCreatedEvent>;

export type DAODestroyedEvent = TypedEvent<[BigNumber], { _zDAOId: BigNumber }>;

export type DAODestroyedEventFilter = TypedEventFilter<DAODestroyedEvent>;

export type DAOModifiedEvent = TypedEvent<
  [BigNumber, string],
  { _zDAOId: BigNumber; _gnosisSafe: string }
>;

export type DAOModifiedEventFilter = TypedEventFilter<DAOModifiedEvent>;

export type LinkAddedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _zDAOId: BigNumber; _zNA: BigNumber }
>;

export type LinkAddedEventFilter = TypedEventFilter<LinkAddedEvent>;

export type LinkRemovedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { _zDAOId: BigNumber; _zNA: BigNumber }
>;

export type LinkRemovedEventFilter = TypedEventFilter<LinkRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface ZDAORegistry extends BaseContract {
  contractName: "ZDAORegistry";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZDAORegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __ZDAORegistry_init(
      _znsHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addNewZDAO(
      _platformType: BigNumberish,
      _zNA: BigNumberish,
      _gnosisSafe: string,
      _name: string,
      _options: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addZDAOFactory(
      _platformType: BigNumberish,
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addZNAAssociation(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminAssociateZNA(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminDisassociateZNA(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminModifyZDAO(
      _zDAOId: BigNumberish,
      _gnosisSafe: string,
      _options: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminRemoveZDAO(
      _zDAOId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    doesZDAOExistForZNA(
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getZDAOById(
      _zDAOId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IZDAORegistry.ZDAORecordStructOutput]>;

    getZDAOByZNA(
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[IZDAORegistry.ZDAORecordStructOutput]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lastZDAOId(overrides?: CallOverrides): Promise<[BigNumber]>;

    listZDAOs(
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IZDAORegistry.ZDAORecordStructOutput[]] & {
        records: IZDAORegistry.ZDAORecordStructOutput[];
      }
    >;

    numberOfzDAOs(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    removeZNAAssociation(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setZNSHub(
      _znsHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    zDAOFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    zDAONames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    zDAORecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, boolean] & {
        platformType: BigNumber;
        id: BigNumber;
        zDAOOwnedBy: string;
        gnosisSafe: string;
        name: string;
        destroyed: boolean;
      }
    >;

    zNATozDAOId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    znsHub(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  __ZDAORegistry_init(
    _znsHub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addNewZDAO(
    _platformType: BigNumberish,
    _zNA: BigNumberish,
    _gnosisSafe: string,
    _name: string,
    _options: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addZDAOFactory(
    _platformType: BigNumberish,
    _factory: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addZNAAssociation(
    _zDAOId: BigNumberish,
    _zNA: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminAssociateZNA(
    _zDAOId: BigNumberish,
    _zNA: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminDisassociateZNA(
    _zDAOId: BigNumberish,
    _zNA: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminModifyZDAO(
    _zDAOId: BigNumberish,
    _gnosisSafe: string,
    _options: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminRemoveZDAO(
    _zDAOId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  doesZDAOExistForZNA(
    _zNA: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getZDAOById(
    _zDAOId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IZDAORegistry.ZDAORecordStructOutput>;

  getZDAOByZNA(
    _zNA: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IZDAORegistry.ZDAORecordStructOutput>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lastZDAOId(overrides?: CallOverrides): Promise<BigNumber>;

  listZDAOs(
    _startIndex: BigNumberish,
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IZDAORegistry.ZDAORecordStructOutput[]>;

  numberOfzDAOs(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  removeZNAAssociation(
    _zDAOId: BigNumberish,
    _zNA: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setZNSHub(
    _znsHub: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  zDAOFactories(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  zDAONames(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  zDAORecords(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, string, boolean] & {
      platformType: BigNumber;
      id: BigNumber;
      zDAOOwnedBy: string;
      gnosisSafe: string;
      name: string;
      destroyed: boolean;
    }
  >;

  zNATozDAOId(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  znsHub(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    __ZDAORegistry_init(
      _znsHub: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addNewZDAO(
      _platformType: BigNumberish,
      _zNA: BigNumberish,
      _gnosisSafe: string,
      _name: string,
      _options: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addZDAOFactory(
      _platformType: BigNumberish,
      _factory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addZNAAssociation(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminAssociateZNA(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminDisassociateZNA(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    adminModifyZDAO(
      _zDAOId: BigNumberish,
      _gnosisSafe: string,
      _options: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    adminRemoveZDAO(
      _zDAOId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    doesZDAOExistForZNA(
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getZDAOById(
      _zDAOId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IZDAORegistry.ZDAORecordStructOutput>;

    getZDAOByZNA(
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IZDAORegistry.ZDAORecordStructOutput>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastZDAOId(overrides?: CallOverrides): Promise<BigNumber>;

    listZDAOs(
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IZDAORegistry.ZDAORecordStructOutput[]>;

    numberOfzDAOs(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    removeZNAAssociation(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setZNSHub(_znsHub: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    zDAOFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    zDAONames(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    zDAORecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, string, boolean] & {
        platformType: BigNumber;
        id: BigNumber;
        zDAOOwnedBy: string;
        gnosisSafe: string;
        name: string;
        destroyed: boolean;
      }
    >;

    zNATozDAOId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    znsHub(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "DAOCreated(uint256,uint256,address,address,address)"(
      _platformType?: BigNumberish | null,
      _zDAOId?: BigNumberish | null,
      _gnosisSafe?: string | null,
      _creator?: null,
      _zDAO?: null
    ): DAOCreatedEventFilter;
    DAOCreated(
      _platformType?: BigNumberish | null,
      _zDAOId?: BigNumberish | null,
      _gnosisSafe?: string | null,
      _creator?: null,
      _zDAO?: null
    ): DAOCreatedEventFilter;

    "DAODestroyed(uint256)"(
      _zDAOId?: BigNumberish | null
    ): DAODestroyedEventFilter;
    DAODestroyed(_zDAOId?: BigNumberish | null): DAODestroyedEventFilter;

    "DAOModified(uint256,address)"(
      _zDAOId?: BigNumberish | null,
      _gnosisSafe?: string | null
    ): DAOModifiedEventFilter;
    DAOModified(
      _zDAOId?: BigNumberish | null,
      _gnosisSafe?: string | null
    ): DAOModifiedEventFilter;

    "LinkAdded(uint256,uint256)"(
      _zDAOId?: BigNumberish | null,
      _zNA?: BigNumberish | null
    ): LinkAddedEventFilter;
    LinkAdded(
      _zDAOId?: BigNumberish | null,
      _zNA?: BigNumberish | null
    ): LinkAddedEventFilter;

    "LinkRemoved(uint256,uint256)"(
      _zDAOId?: BigNumberish | null,
      _zNA?: BigNumberish | null
    ): LinkRemovedEventFilter;
    LinkRemoved(
      _zDAOId?: BigNumberish | null,
      _zNA?: BigNumberish | null
    ): LinkRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __ZDAORegistry_init(
      _znsHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addNewZDAO(
      _platformType: BigNumberish,
      _zNA: BigNumberish,
      _gnosisSafe: string,
      _name: string,
      _options: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addZDAOFactory(
      _platformType: BigNumberish,
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addZNAAssociation(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminAssociateZNA(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminDisassociateZNA(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminModifyZDAO(
      _zDAOId: BigNumberish,
      _gnosisSafe: string,
      _options: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminRemoveZDAO(
      _zDAOId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    doesZDAOExistForZNA(
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getZDAOById(
      _zDAOId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getZDAOByZNA(
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastZDAOId(overrides?: CallOverrides): Promise<BigNumber>;

    listZDAOs(
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfzDAOs(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    removeZNAAssociation(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setZNSHub(
      _znsHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    zDAOFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zDAONames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zDAORecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zNATozDAOId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    znsHub(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __ZDAORegistry_init(
      _znsHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addNewZDAO(
      _platformType: BigNumberish,
      _zNA: BigNumberish,
      _gnosisSafe: string,
      _name: string,
      _options: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addZDAOFactory(
      _platformType: BigNumberish,
      _factory: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addZNAAssociation(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminAssociateZNA(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminDisassociateZNA(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminModifyZDAO(
      _zDAOId: BigNumberish,
      _gnosisSafe: string,
      _options: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminRemoveZDAO(
      _zDAOId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    doesZDAOExistForZNA(
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getZDAOById(
      _zDAOId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getZDAOByZNA(
      _zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastZDAOId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    listZDAOs(
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfzDAOs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeZNAAssociation(
      _zDAOId: BigNumberish,
      _zNA: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setZNSHub(
      _znsHub: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zDAOFactories(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zDAONames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zDAORecords(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zNATozDAOId(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    znsHub(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
