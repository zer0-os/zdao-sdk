/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace IPolygonZDAO {
  export type ProposalStruct = {
    proposalId: BigNumberish;
    startTimestamp: BigNumberish;
    endTimestamp: BigNumberish;
    yes: BigNumberish;
    no: BigNumberish;
    voters: BigNumberish;
    snapshot: BigNumberish;
    calculated: boolean;
    executed: boolean;
    canceled: boolean;
  };

  export type ProposalStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean
  ] & {
    proposalId: BigNumber;
    startTimestamp: BigNumber;
    endTimestamp: BigNumber;
    yes: BigNumber;
    no: BigNumber;
    voters: BigNumber;
    snapshot: BigNumber;
    calculated: boolean;
    executed: boolean;
    canceled: boolean;
  };
}

export interface PolygonZDAOInterface extends utils.Interface {
  contractName: "PolygonZDAO";
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "__ZDAO_init(address,address,uint256,uint256,address)": FunctionFragment;
    "calculateProposal(uint256)": FunctionFragment;
    "canCalculateProposal(uint256)": FunctionFragment;
    "canVote(uint256,address)": FunctionFragment;
    "cancelProposal(uint256)": FunctionFragment;
    "choiceOfVoter(uint256,address)": FunctionFragment;
    "createProposal(uint256,uint256)": FunctionFragment;
    "destroyed()": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "listProposals(uint256,uint256)": FunctionFragment;
    "listVoters(uint256,uint256,uint256)": FunctionFragment;
    "numberOfProposals()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "proposalIds(uint256)": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setDestroyed(bool)": FunctionFragment;
    "staking()": FunctionFragment;
    "state(uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateToken(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "version()": FunctionFragment;
    "vote(uint256,address,uint256)": FunctionFragment;
    "votesResultOfProposal(uint256)": FunctionFragment;
    "votingPowerOfVoter(uint256,address)": FunctionFragment;
    "zDAOChef()": FunctionFragment;
    "zDAOId()": FunctionFragment;
    "zDAOInfo()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__ZDAO_init",
    values: [string, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canCalculateProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "choiceOfVoter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "destroyed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "listProposals",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listVoters",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProposals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDestroyed",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "staking", values?: undefined): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "updateToken", values: [string]): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votesResultOfProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPowerOfVoter",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "zDAOChef", values?: undefined): string;
  encodeFunctionData(functionFragment: "zDAOId", values?: undefined): string;
  encodeFunctionData(functionFragment: "zDAOInfo", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__ZDAO_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canCalculateProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "choiceOfVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "destroyed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "listProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listVoters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDestroyed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "staking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votesResultOfProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPowerOfVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "zDAOChef", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zDAOId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zDAOInfo", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string],
  { previousAdmin: string; newAdmin: string }
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export type BeaconUpgradedEvent = TypedEvent<[string], { beacon: string }>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type UpgradedEvent = TypedEvent<[string], { implementation: string }>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface PolygonZDAO extends BaseContract {
  contractName: "PolygonZDAO";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PolygonZDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __ZDAO_init(
      _zDAOChef: string,
      _staking: string,
      _zDAOId: BigNumberish,
      _duration: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    canCalculateProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canVote(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    choiceOfVoter(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    createProposal(
      _proposalId: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroyed(overrides?: CallOverrides): Promise<[boolean]>;

    executeProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    listProposals(
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [IPolygonZDAO.ProposalStructOutput[]] & {
        records: IPolygonZDAO.ProposalStructOutput[];
      }
    >;

    listVoters(
      _proposalId: BigNumberish,
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        voters: string[];
        choices: BigNumber[];
        votes: BigNumber[];
      }
    >;

    numberOfProposals(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proposalIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        proposalId: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        yes: BigNumber;
        no: BigNumber;
        voters: BigNumber;
        snapshot: BigNumber;
        calculated: boolean;
        executed: boolean;
        canceled: boolean;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDestroyed(
      _destroyed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    staking(overrides?: CallOverrides): Promise<[string]>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      _proposalId: BigNumberish,
      _voter: string,
      _choice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votesResultOfProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        voters: BigNumber;
        yes: BigNumber;
        no: BigNumber;
      }
    >;

    votingPowerOfVoter(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    zDAOChef(overrides?: CallOverrides): Promise<[string]>;

    zDAOId(overrides?: CallOverrides): Promise<[BigNumber]>;

    zDAOInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, boolean] & {
        zDAOId: BigNumber;
        duration: BigNumber;
        token: string;
        snapshot: BigNumber;
        destroyed: boolean;
      }
    >;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  __ZDAO_init(
    _zDAOChef: string,
    _staking: string,
    _zDAOId: BigNumberish,
    _duration: BigNumberish,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateProposal(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  canCalculateProposal(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canVote(
    _proposalId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelProposal(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  choiceOfVoter(
    _proposalId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<number>;

  createProposal(
    _proposalId: BigNumberish,
    _startTimestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroyed(overrides?: CallOverrides): Promise<boolean>;

  executeProposal(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  listProposals(
    _startIndex: BigNumberish,
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<IPolygonZDAO.ProposalStructOutput[]>;

  listVoters(
    _proposalId: BigNumberish,
    _startIndex: BigNumberish,
    _count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string[], BigNumber[], BigNumber[]] & {
      voters: string[];
      choices: BigNumber[];
      votes: BigNumber[];
    }
  >;

  numberOfProposals(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proposalIds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean
    ] & {
      proposalId: BigNumber;
      startTimestamp: BigNumber;
      endTimestamp: BigNumber;
      yes: BigNumber;
      no: BigNumber;
      voters: BigNumber;
      snapshot: BigNumber;
      calculated: boolean;
      executed: boolean;
      canceled: boolean;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDestroyed(
    _destroyed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  staking(overrides?: CallOverrides): Promise<string>;

  state(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _proposalId: BigNumberish,
    _voter: string,
    _choice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votesResultOfProposal(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      voters: BigNumber;
      yes: BigNumber;
      no: BigNumber;
    }
  >;

  votingPowerOfVoter(
    _proposalId: BigNumberish,
    _voter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  zDAOChef(overrides?: CallOverrides): Promise<string>;

  zDAOId(overrides?: CallOverrides): Promise<BigNumber>;

  zDAOInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, boolean] & {
      zDAOId: BigNumber;
      duration: BigNumber;
      token: string;
      snapshot: BigNumber;
      destroyed: boolean;
    }
  >;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    __ZDAO_init(
      _zDAOChef: string,
      _staking: string,
      _zDAOId: BigNumberish,
      _duration: BigNumberish,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        voters: BigNumber;
        yes: BigNumber;
        no: BigNumber;
      }
    >;

    canCalculateProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canVote(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    choiceOfVoter(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<number>;

    createProposal(
      _proposalId: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    destroyed(overrides?: CallOverrides): Promise<boolean>;

    executeProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    listProposals(
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<IPolygonZDAO.ProposalStructOutput[]>;

    listVoters(
      _proposalId: BigNumberish,
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string[], BigNumber[], BigNumber[]] & {
        voters: string[];
        choices: BigNumber[];
        votes: BigNumber[];
      }
    >;

    numberOfProposals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proposalIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean
      ] & {
        proposalId: BigNumber;
        startTimestamp: BigNumber;
        endTimestamp: BigNumber;
        yes: BigNumber;
        no: BigNumber;
        voters: BigNumber;
        snapshot: BigNumber;
        calculated: boolean;
        executed: boolean;
        canceled: boolean;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDestroyed(_destroyed: boolean, overrides?: CallOverrides): Promise<void>;

    staking(overrides?: CallOverrides): Promise<string>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateToken(_token: string, overrides?: CallOverrides): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _proposalId: BigNumberish,
      _voter: string,
      _choice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    votesResultOfProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        voters: BigNumber;
        yes: BigNumber;
        no: BigNumber;
      }
    >;

    votingPowerOfVoter(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zDAOChef(overrides?: CallOverrides): Promise<string>;

    zDAOId(overrides?: CallOverrides): Promise<BigNumber>;

    zDAOInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, boolean] & {
        zDAOId: BigNumber;
        duration: BigNumber;
        token: string;
        snapshot: BigNumber;
        destroyed: boolean;
      }
    >;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __ZDAO_init(
      _zDAOChef: string,
      _staking: string,
      _zDAOId: BigNumberish,
      _duration: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    canCalculateProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canVote(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    choiceOfVoter(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createProposal(
      _proposalId: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroyed(overrides?: CallOverrides): Promise<BigNumber>;

    executeProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listProposals(
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listVoters(
      _proposalId: BigNumberish,
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfProposals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proposalIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDestroyed(
      _destroyed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    staking(overrides?: CallOverrides): Promise<BigNumber>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _proposalId: BigNumberish,
      _voter: string,
      _choice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votesResultOfProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingPowerOfVoter(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    zDAOChef(overrides?: CallOverrides): Promise<BigNumber>;

    zDAOId(overrides?: CallOverrides): Promise<BigNumber>;

    zDAOInfo(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __ZDAO_init(
      _zDAOChef: string,
      _staking: string,
      _zDAOId: BigNumberish,
      _duration: BigNumberish,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    canCalculateProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    choiceOfVoter(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createProposal(
      _proposalId: BigNumberish,
      _startTimestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroyed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listProposals(
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listVoters(
      _proposalId: BigNumberish,
      _startIndex: BigNumberish,
      _count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfProposals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDestroyed(
      _destroyed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    staking(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    state(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _proposalId: BigNumberish,
      _voter: string,
      _choice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votesResultOfProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingPowerOfVoter(
      _proposalId: BigNumberish,
      _voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    zDAOChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zDAOId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    zDAOInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
