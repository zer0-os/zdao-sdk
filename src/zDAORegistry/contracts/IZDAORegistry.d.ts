/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IZDAORegistryInterface extends ethers.utils.Interface {
  functions: {
    "doeszDAOExistForzNA(uint256)": FunctionFragment;
    "ensTozDAO(uint256)": FunctionFragment;
    "getzDAOById(uint256)": FunctionFragment;
    "getzDaoByZNA(uint256)": FunctionFragment;
    "listzDAOs(uint256,uint256)": FunctionFragment;
    "numberOfzDAOs()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "doeszDAOExistForzNA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ensTozDAO",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getzDAOById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getzDaoByZNA",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "listzDAOs",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfzDAOs",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "doeszDAOExistForzNA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ensTozDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getzDAOById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getzDaoByZNA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "listzDAOs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfzDAOs",
    data: BytesLike
  ): Result;

  events: {
    "DAOCreated(uint256,uint256,address)": EventFragment;
    "LinkAdded(uint256,uint256)": EventFragment;
    "LinkRemoved(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DAOCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinkRemoved"): EventFragment;
}

export class IZDAORegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IZDAORegistryInterface;

  functions: {
    doeszDAOExistForzNA(
      zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ensTozDAO(
      ens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getzDAOById(
      daoId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string, BigNumber[]] & {
          id: BigNumber;
          ensId: BigNumber;
          gnosisSafe: string;
          associatedzNAs: BigNumber[];
        }
      ]
    >;

    getzDaoByZNA(
      zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, string, BigNumber[]] & {
          id: BigNumber;
          ensId: BigNumber;
          gnosisSafe: string;
          associatedzNAs: BigNumber[];
        }
      ]
    >;

    listzDAOs(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, string, BigNumber[]] & {
          id: BigNumber;
          ensId: BigNumber;
          gnosisSafe: string;
          associatedzNAs: BigNumber[];
        })[]
      ]
    >;

    numberOfzDAOs(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  doeszDAOExistForzNA(
    zNA: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ensTozDAO(ens: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getzDAOById(
    daoId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber[]] & {
      id: BigNumber;
      ensId: BigNumber;
      gnosisSafe: string;
      associatedzNAs: BigNumber[];
    }
  >;

  getzDaoByZNA(
    zNA: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber[]] & {
      id: BigNumber;
      ensId: BigNumber;
      gnosisSafe: string;
      associatedzNAs: BigNumber[];
    }
  >;

  listzDAOs(
    startIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, string, BigNumber[]] & {
      id: BigNumber;
      ensId: BigNumber;
      gnosisSafe: string;
      associatedzNAs: BigNumber[];
    })[]
  >;

  numberOfzDAOs(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    doeszDAOExistForzNA(
      zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ensTozDAO(ens: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getzDAOById(
      daoId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber[]] & {
        id: BigNumber;
        ensId: BigNumber;
        gnosisSafe: string;
        associatedzNAs: BigNumber[];
      }
    >;

    getzDaoByZNA(
      zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber[]] & {
        id: BigNumber;
        ensId: BigNumber;
        gnosisSafe: string;
        associatedzNAs: BigNumber[];
      }
    >;

    listzDAOs(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, string, BigNumber[]] & {
        id: BigNumber;
        ensId: BigNumber;
        gnosisSafe: string;
        associatedzNAs: BigNumber[];
      })[]
    >;

    numberOfzDAOs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    DAOCreated(
      daoId?: BigNumberish | null,
      ensId?: null,
      gnosisSafe?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string],
      { daoId: BigNumber; ensId: BigNumber; gnosisSafe: string }
    >;

    LinkAdded(
      daoId?: BigNumberish | null,
      zNA?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { daoId: BigNumber; zNA: BigNumber }
    >;

    LinkRemoved(
      daoId?: BigNumberish | null,
      zNA?: BigNumberish | null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { daoId: BigNumber; zNA: BigNumber }
    >;
  };

  estimateGas: {
    doeszDAOExistForzNA(
      zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ensTozDAO(ens: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getzDAOById(
      daoId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getzDaoByZNA(
      zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    listzDAOs(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfzDAOs(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    doeszDAOExistForzNA(
      zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensTozDAO(
      ens: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getzDAOById(
      daoId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getzDaoByZNA(
      zNA: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    listzDAOs(
      startIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfzDAOs(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
